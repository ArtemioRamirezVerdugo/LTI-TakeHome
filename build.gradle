import com.github.spotbugs.snom.Effort
import com.github.spotbugs.snom.Confidence

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id "com.github.spotbugs" version "6.0.7"
    id 'checkstyle'
    id 'jacoco'
}

group = 'com.oimzen.services'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

checkstyle {
    toolVersion = '10.13.0'
    sourceSets = [sourceSets.main]
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-jdbc:3.2.2'
    implementation 'org.springframework.boot:spring-boot-starter-jersey:3.2.2'
    implementation 'org.xerial:sqlite-jdbc:3.45.1.0'
    implementation 'jakarta.inject:jakarta.inject-api:1.0'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    compileOnly 'org.projectlombok:lombok'
    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.4.2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test:3.2.2') {
        exclude group: 'com.jayway.jsonpath', module: 'json-path'
    }
    testImplementation 'com.jayway.jsonpath:json-path:2.9.0'
}

tasks.named('test') {
    useJUnitPlatform()
}

spotbugsMain {
    effort = Effort.MAX
    reportLevel = Confidence.valueOf("LOW") //This prop is currently bugged and cannot use the proper enum
    ignoreFailures = false
    showStackTraces = true
    showProgress = true
    reports {
        xml.required = false
        html.required = true
    }
}

spotbugsTest {
    onlyIf { false }
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = false
        html.required = true
    }
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
    }
    dependsOn test // tests are required to run before generating the report

}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.85
            }
        }
    }
}